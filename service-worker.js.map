{"version":3,"sources":["../node_modules/workbox-core/_version.js","../node_modules/workbox-core/models/messages/messages.js","../node_modules/workbox-core/models/messages/messageGenerator.js","../node_modules/workbox-core/_private/WorkboxError.js","../node_modules/workbox-core/_private/assert.js","../node_modules/workbox-core/_private/logger.js","../node_modules/workbox-routing/_version.js","../node_modules/workbox-routing/utils/constants.js","../node_modules/workbox-routing/utils/normalizeHandler.js","../node_modules/workbox-routing/Route.js","../node_modules/workbox-routing/NavigationRoute.js","../node_modules/workbox-routing/RegExpRoute.js","../node_modules/workbox-core/_private/getFriendlyURL.js","../node_modules/workbox-routing/Router.js","../node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","../node_modules/workbox-routing/registerRoute.js","../node_modules/workbox-routing/setCatchHandler.js","../node_modules/workbox-routing/setDefaultHandler.js","../node_modules/workbox-routing/index.js","../node_modules/workbox-routing/index.mjs","../node_modules/workbox-core/_private/cacheNames.js","../node_modules/workbox-core/_private/waitUntil.js","../node_modules/workbox-precaching/_version.js","../node_modules/workbox-precaching/utils/createCacheKey.js","../node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","../node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","../node_modules/workbox-precaching/utils/printCleanupDetails.js","../node_modules/workbox-precaching/utils/printInstallDetails.js","../node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","../node_modules/workbox-core/copyResponse.js","../node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","../node_modules/workbox-core/_private/Deferred.js","../node_modules/workbox-core/models/quotaErrorCallbacks.js","../node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","../node_modules/workbox-core/_private/timeout.js","../node_modules/workbox-strategies/_version.js","../node_modules/workbox-strategies/StrategyHandler.js","../node_modules/workbox-strategies/Strategy.js","../node_modules/workbox-precaching/PrecacheStrategy.js","../node_modules/workbox-precaching/PrecacheController.js","../node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","../node_modules/workbox-precaching/addPlugins.js","../node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","../node_modules/workbox-precaching/utils/generateURLVariations.js","../node_modules/workbox-precaching/PrecacheRoute.js","../node_modules/workbox-precaching/addRoute.js","../node_modules/workbox-precaching/utils/deleteOutdatedCaches.js","../node_modules/workbox-precaching/cleanupOutdatedCaches.js","../node_modules/workbox-precaching/createHandlerBoundToURL.js","../node_modules/workbox-precaching/getCacheKeyForURL.js","../node_modules/workbox-precaching/matchPrecache.js","../node_modules/workbox-precaching/precache.js","../node_modules/workbox-precaching/precacheAndRoute.js","../node_modules/workbox-precaching/PrecacheFallbackPlugin.js","../node_modules/workbox-precaching/_types.js","../node_modules/workbox-precaching/index.js","../node_modules/workbox-precaching/index.mjs","../node_modules/workbox-strategies/utils/messages.js","../node_modules/workbox-strategies/CacheFirst.js","../node_modules/workbox-strategies/CacheOnly.js","../node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","../node_modules/workbox-strategies/NetworkFirst.js","../node_modules/workbox-strategies/NetworkOnly.js","../node_modules/workbox-strategies/StaleWhileRevalidate.js","../node_modules/workbox-strategies/index.js","../node_modules/workbox-strategies/index.mjs","../node_modules/workbox-cacheable-response/_version.js","../node_modules/workbox-cacheable-response/CacheableResponse.js","../node_modules/workbox-cacheable-response/CacheableResponsePlugin.js","../node_modules/workbox-cacheable-response/index.js","../node_modules/workbox-cacheable-response/index.mjs","../node_modules/workbox-core/_private/dontWaitFor.js","../node_modules/idb/build/esm/wrap-idb-value.js","../node_modules/idb/build/esm/index.js","../node_modules/workbox-expiration/_version.js","../node_modules/workbox-expiration/models/CacheTimestampsModel.js","../node_modules/workbox-expiration/CacheExpiration.js","../node_modules/workbox-core/registerQuotaErrorCallback.js","../node_modules/workbox-expiration/ExpirationPlugin.js","../node_modules/workbox-expiration/index.js","../node_modules/workbox-expiration/index.mjs","service-worker.js"],"names":["messages","paramName","validValueDescription","value","Error","JSON","stringify","moduleName","className","funcName","expectedType","expectedClassName","isReturnValueProblem","classNameStr","expectedMethod","entry","firstEntry","secondEntry","thrownErrorMessage","cacheNameId","method","name","methodName","expectedClass","normalizedRangeHeader","size","start","end","url","error","message","status","cacheName","origin","type","fallback","code","args","msg","length","generatorFunction","details","messageGenerator","WorkboxError","constructor","errorCode","isArray","Array","hasMethod","object","isType","isInstance","isOneOf","validValues","includes","isArrayOfClass","item","finalAssertExports","logger","defaultMethod","validMethods","normalizeHandler","handler","handle","Route","match","setCatchHandler","catchHandler","NavigationRoute","allowlist","denylist","options","_match","_allowlist","_denylist","request","mode","pathnameAndSearch","pathname","search","regExp","test","some","RegExpRoute","result","exec","href","location","index","slice","getFriendlyURL","URL","String","replace","RegExp","Router","_routes","Map","_defaultHandlerMap","addFetchListener","self","addEventListener","event","responsePromise","handleRequest","respondWith","addCacheListener","data","payload","requestPromises","Promise","all","urlsToCache","map","Request","waitUntil","ports","then","postMessage","protocol","startsWith","sameOrigin","params","route","findMatchingRoute","has","get","err","reject","_catchHandler","catch","catchErr","routes","matchResult","undefined","Object","keys","setDefaultHandler","set","registerRoute","push","unregisterRoute","routeIndex","indexOf","splice","defaultRouter","getOrCreateDefaultRouter","capture","captureUrl","matchCallback","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","_createCacheName","filter","join","eachCacheNameDetail","fn","key","cacheNames","updateDetails","getGoogleAnalyticsName","userCacheName","getPrecacheName","getPrefix","getRuntimeName","getSuffix","asyncFn","returnPromise","REVISION_SEARCH_PARAM","createCacheKey","urlObject","cacheKey","revision","cacheKeyURL","originalURL","searchParams","PrecacheInstallReportPlugin","updatedURLs","notUpdatedURLs","handlerWillStart","state","originalRequest","cachedResponseWillBeUsed","cachedResponse","PrecacheCacheKeyPlugin","precacheController","cacheKeyWillBeUsed","_precacheController","getCacheKeyForURL","headers","logGroup","groupTitle","deletedURLs","groupCollapsed","log","groupEnd","printCleanupDetails","deletionCount","_nestedGroup","urls","printInstallDetails","urlsToPrecache","urlsAlreadyPrecached","precachedCount","alreadyPrecachedCount","supportStatus","canConstructResponseFromBodyStream","testResponse","Response","body","copyResponse","response","modifier","clonedResponse","clone","responseInit","Headers","statusText","modifiedResponseInit","blob","stripParams","fullURL","ignoreParams","strippedURL","param","delete","cacheMatchIgnoreParams","cache","matchOptions","strippedRequestURL","keysOptions","assign","ignoreSearch","cacheKeys","Deferred","promise","resolve","quotaErrorCallbacks","Set","executeQuotaErrorCallbacks","callback","timeout","ms","setTimeout","toRequest","input","StrategyHandler","strategy","_cacheKeys","_strategy","_handlerDeferred","_extendLifetimePromises","_plugins","plugins","_pluginStateMap","plugin","FetchEvent","preloadResponse","possiblePreloadResponse","hasCallback","cb","iterateCallbacks","pluginFilteredRequest","fetchResponse","fetch","fetchOptions","runCallbacks","responseClone","cachePut","effectiveRequest","getCacheKey","multiMatchOptions","caches","responseToCache","_ensureResponseSafeToCache","open","hasCacheUpdateCallback","oldResponse","put","newResponse","statefulCallback","statefulParam","shift","destroy","pluginsUsed","Strategy","responseDone","handleAll","_getResponse","_awaitComplete","_handle","doneWaiting","waitUntilError","PrecacheStrategy","_fallbackToNetwork","fallbackToNetwork","copyRedirectedCacheableResponsesPlugin","cacheMatch","_handleInstall","_handleFetch","integrityInManifest","integrity","integrityInRequest","noIntegrityConflict","_useDefaultCacheabilityPluginIfNeeded","defaultPluginIndex","cacheWillUpdatePluginCount","entries","defaultPrecacheCacheabilityPlugin","cacheWillUpdate","redirected","PrecacheController","_urlsToCacheKeys","_urlsToCacheModes","_cacheKeysToIntegrities","install","bind","activate","addToCacheList","_installAndActiveListenersAdded","urlsToWarnAbout","cacheMode","warningMessage","console","warn","installReportPlugin","credentials","currentlyCachedRequests","expectedCacheKeys","values","getURLsToCacheKeys","getCachedURLs","getIntegrityForCacheKey","createHandlerBoundToURL","getOrCreatePrecacheController","addPlugins","removeIgnoredSearchParams","ignoreURLParametersMatching","generateURLVariations","directoryIndex","cleanURLs","urlManipulation","hash","urlWithoutIgnoredParams","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt","PrecacheRoute","urlsToCacheKeys","possibleURL","addRoute","precacheRoute","SUBSTRING_TO_FIND","deleteOutdatedCaches","currentPrecacheName","substringToFind","cacheNamesToDelete","cleanupOutdatedCaches","cachesDeleted","matchPrecache","precacheAndRoute","PrecacheFallbackPlugin","fallbackURL","handlerDidError","_fallbackURL","strategyStart","strategyName","printFinalResponse","CacheFirst","fetchAndCachePut","CacheOnly","cacheOkAndOpaquePlugin","NetworkFirst","p","unshift","_networkTimeoutSeconds","networkTimeoutSeconds","logs","promises","timeoutId","id","_getTimeoutPromise","networkPromise","_getNetworkPromise","race","fetchError","clearTimeout","NetworkOnly","timeoutPromise","StaleWhileRevalidate","fetchAndCachePromise","CacheableResponse","config","_statuses","statuses","_headers","isResponseCacheable","cacheable","headerName","CacheableResponsePlugin","_cacheableResponse","dontWaitFor","instanceOfAny","constructors","c","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","IDBDatabase","IDBObjectStore","IDBIndex","IDBCursor","IDBTransaction","getCursorAdvanceMethods","prototype","advance","continue","continuePrimaryKey","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","promisifyRequest","unlisten","removeEventListener","success","wrap","cacheDonePromiseForTransaction","tx","done","complete","DOMException","idbProxyTraps","target","prop","receiver","objectStoreNames","objectStore","replaceTraps","wrapFunction","func","transaction","apply","unwrap","storeNames","call","sort","transformCachableValue","Proxy","IDBRequest","newValue","openDB","version","blocked","upgrade","blocking","terminated","indexedDB","openPromise","oldVersion","newVersion","db","deleteDB","deleteDatabase","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","storeName","store","oldTraps","DB_NAME","CACHE_OBJECT_STORE","normalizeURL","unNormalizedUrl","CacheTimestampsModel","_db","_cacheName","_upgradeDb","objStore","createObjectStore","keyPath","createIndex","unique","_upgradeDbAndDeleteOldDbs","timestamp","_getId","getDb","durability","minTimestamp","maxCount","cursor","openCursor","entriesToDelete","entriesNotDeletedCount","urlsDeleted","CacheExpiration","_isRunning","_rerunRequested","_maxEntries","maxEntries","_maxAgeSeconds","maxAgeSeconds","_matchOptions","_timestampModel","Date","now","urlsExpired","expireEntries","setTimestamp","getTimestamp","expireOlderThan","Infinity","registerQuotaErrorCallback","add","ExpirationPlugin","isFresh","_isResponseDateFresh","cacheExpiration","_getCacheExpiration","updateTimestampDone","updateTimestamp","cacheDidUpdate","_config","_cacheExpirations","purgeOnQuotaError","deleteCacheAndMetadata","dateHeaderTimestamp","_getDateHeaderTimestamp","dateHeader","headerTime","getTime","isNaN","noop","IS_DEV","_registerRoute","_precacheAndRoute","destination","__precacheManifest"],"mappings":"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","file":"service-worker.js","sourceRoot":"../public","sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:6.5.2'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../../_version.js';\nexport const messages = {\n    'invalid-value': ({ paramName, validValueDescription, value }) => {\n        if (!paramName || !validValueDescription) {\n            throw new Error(`Unexpected input to 'invalid-value' error.`);\n        }\n        return (`The '${paramName}' parameter was given a value with an ` +\n            `unexpected value. ${validValueDescription} Received a value of ` +\n            `${JSON.stringify(value)}.`);\n    },\n    'not-an-array': ({ moduleName, className, funcName, paramName }) => {\n        if (!moduleName || !className || !funcName || !paramName) {\n            throw new Error(`Unexpected input to 'not-an-array' error.`);\n        }\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${className}.${funcName}()' must be an array.`);\n    },\n    'incorrect-type': ({ expectedType, paramName, moduleName, className, funcName, }) => {\n        if (!expectedType || !paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}` +\n            `${funcName}()' must be of type ${expectedType}.`);\n    },\n    'incorrect-class': ({ expectedClassName, paramName, moduleName, className, funcName, isReturnValueProblem, }) => {\n        if (!expectedClassName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        if (isReturnValueProblem) {\n            return (`The return value from ` +\n                `'${moduleName}.${classNameStr}${funcName}()' ` +\n                `must be an instance of class ${expectedClassName}.`);\n        }\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}${funcName}()' ` +\n            `must be an instance of class ${expectedClassName}.`);\n    },\n    'missing-a-method': ({ expectedMethod, paramName, moduleName, className, funcName, }) => {\n        if (!expectedMethod ||\n            !paramName ||\n            !moduleName ||\n            !className ||\n            !funcName) {\n            throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        }\n        return (`${moduleName}.${className}.${funcName}() expected the ` +\n            `'${paramName}' parameter to expose a '${expectedMethod}' method.`);\n    },\n    'add-to-cache-list-unexpected-type': ({ entry }) => {\n        return (`An unexpected entry was passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` +\n            `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` +\n            `strings with one or more characters, objects with a url property or ` +\n            `Request objects.`);\n    },\n    'add-to-cache-list-conflicting-entries': ({ firstEntry, secondEntry }) => {\n        if (!firstEntry || !secondEntry) {\n            throw new Error(`Unexpected input to ` + `'add-to-cache-list-duplicate-entries' error.`);\n        }\n        return (`Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${firstEntry} but different revision details. Workbox is ` +\n            `unable to cache and version the asset correctly. Please remove one ` +\n            `of the entries.`);\n    },\n    'plugin-error-request-will-fetch': ({ thrownErrorMessage }) => {\n        if (!thrownErrorMessage) {\n            throw new Error(`Unexpected input to ` + `'plugin-error-request-will-fetch', error.`);\n        }\n        return (`An error was thrown by a plugins 'requestWillFetch()' method. ` +\n            `The thrown error message was: '${thrownErrorMessage}'.`);\n    },\n    'invalid-cache-name': ({ cacheNameId, value }) => {\n        if (!cacheNameId) {\n            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        }\n        return (`You must provide a name containing at least one character for ` +\n            `setCacheDetails({${cacheNameId}: '...'}). Received a value of ` +\n            `'${JSON.stringify(value)}'`);\n    },\n    'unregister-route-but-not-found-with-method': ({ method }) => {\n        if (!method) {\n            throw new Error(`Unexpected input to ` +\n                `'unregister-route-but-not-found-with-method' error.`);\n        }\n        return (`The route you're trying to unregister was not  previously ` +\n            `registered for the method type '${method}'.`);\n    },\n    'unregister-route-route-not-registered': () => {\n        return (`The route you're trying to unregister was not previously ` +\n            `registered.`);\n    },\n    'queue-replay-failed': ({ name }) => {\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    'duplicate-queue-name': ({ name }) => {\n        return (`The Queue name '${name}' is already being used. ` +\n            `All instances of backgroundSync.Queue must be given unique names.`);\n    },\n    'expired-test-without-max-age': ({ methodName, paramName }) => {\n        return (`The '${methodName}()' method can only be used when the ` +\n            `'${paramName}' is used in the constructor.`);\n    },\n    'unsupported-route-type': ({ moduleName, className, funcName, paramName }) => {\n        return (`The supplied '${paramName}' parameter was an unsupported type. ` +\n            `Please check the docs for ${moduleName}.${className}.${funcName} for ` +\n            `valid input types.`);\n    },\n    'not-array-of-class': ({ value, expectedClass, moduleName, className, funcName, paramName, }) => {\n        return (`The supplied '${paramName}' parameter must be an array of ` +\n            `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` +\n            `Please check the call to ${moduleName}.${className}.${funcName}() ` +\n            `to fix the issue.`);\n    },\n    'max-entries-or-age-required': ({ moduleName, className, funcName }) => {\n        return (`You must define either config.maxEntries or config.maxAgeSeconds` +\n            `in ${moduleName}.${className}.${funcName}`);\n    },\n    'statuses-or-headers-required': ({ moduleName, className, funcName }) => {\n        return (`You must define either config.statuses or config.headers` +\n            `in ${moduleName}.${className}.${funcName}`);\n    },\n    'invalid-string': ({ moduleName, funcName, paramName }) => {\n        if (!paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'invalid-string' error.`);\n        }\n        return (`When using strings, the '${paramName}' parameter must start with ` +\n            `'http' (for cross-origin matches) or '/' (for same-origin matches). ` +\n            `Please see the docs for ${moduleName}.${funcName}() for ` +\n            `more info.`);\n    },\n    'channel-name-required': () => {\n        return (`You must provide a channelName to construct a ` +\n            `BroadcastCacheUpdate instance.`);\n    },\n    'invalid-responses-are-same-args': () => {\n        return (`The arguments passed into responsesAreSame() appear to be ` +\n            `invalid. Please ensure valid Responses are used.`);\n    },\n    'expire-custom-caches-only': () => {\n        return (`You must provide a 'cacheName' property when using the ` +\n            `expiration plugin with a runtime caching strategy.`);\n    },\n    'unit-must-be-bytes': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        }\n        return (`The 'unit' portion of the Range header must be set to 'bytes'. ` +\n            `The Range header provided was \"${normalizedRangeHeader}\"`);\n    },\n    'single-range-only': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'single-range-only' error.`);\n        }\n        return (`Multiple ranges are not supported. Please use a  single start ` +\n            `value, and optional end value. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`);\n    },\n    'invalid-range-values': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        }\n        return (`The Range header is missing both start and end values. At least ` +\n            `one of those values is needed. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`);\n    },\n    'no-range-header': () => {\n        return `No Range header was found in the Request provided.`;\n    },\n    'range-not-satisfiable': ({ size, start, end }) => {\n        return (`The start (${start}) and end (${end}) values in the Range are ` +\n            `not satisfiable by the cached response, which is ${size} bytes.`);\n    },\n    'attempt-to-cache-non-get-request': ({ url, method }) => {\n        return (`Unable to cache '${url}' because it is a '${method}' request and ` +\n            `only 'GET' requests can be cached.`);\n    },\n    'cache-put-with-no-response': ({ url }) => {\n        return (`There was an attempt to cache '${url}' but the response was not ` +\n            `defined.`);\n    },\n    'no-response': ({ url, error }) => {\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) {\n            message += ` The underlying error is ${error}.`;\n        }\n        return message;\n    },\n    'bad-precaching-response': ({ url, status }) => {\n        return (`The precaching request for '${url}' failed` +\n            (status ? ` with an HTTP status of ${status}.` : `.`));\n    },\n    'non-precached-url': ({ url }) => {\n        return (`createHandlerBoundToURL('${url}') was called, but that URL is ` +\n            `not precached. Please pass in a URL that is precached instead.`);\n    },\n    'add-to-cache-list-conflicting-integrities': ({ url }) => {\n        return (`Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${url} with different integrity values. Please remove one of them.`);\n    },\n    'missing-precache-entry': ({ cacheName, url }) => {\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n    'cross-origin-copy-response': ({ origin }) => {\n        return (`workbox-core.copyResponse() can only be used with same-origin ` +\n            `responses. It was passed a response with origin ${origin}.`);\n    },\n    'opaque-streams-source': ({ type }) => {\n        const message = `One of the workbox-streams sources resulted in an ` +\n            `'${type}' response.`;\n        if (type === 'opaqueredirect') {\n            return (`${message} Please do not use a navigation request that results ` +\n                `in a redirect as a source.`);\n        }\n        return `${message} Please ensure your sources are CORS-enabled.`;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.js';\nimport '../_version.js';\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, details) => {\n    if (!Array.isArray(value)) {\n        throw new WorkboxError('not-an-array', details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details) => {\n    const type = typeof object[expectedMethod];\n    if (type !== 'function') {\n        details['expectedMethod'] = expectedMethod;\n        throw new WorkboxError('missing-a-method', details);\n    }\n};\nconst isType = (object, expectedType, details) => {\n    if (typeof object !== expectedType) {\n        details['expectedType'] = expectedType;\n        throw new WorkboxError('incorrect-type', details);\n    }\n};\nconst isInstance = (object, \n// Need the general type to do the check later.\n// eslint-disable-next-line @typescript-eslint/ban-types\nexpectedClass, details) => {\n    if (!(object instanceof expectedClass)) {\n        details['expectedClassName'] = expectedClass.name;\n        throw new WorkboxError('incorrect-class', details);\n    }\n};\nconst isOneOf = (value, validValues, details) => {\n    if (!validValues.includes(value)) {\n        details['validValueDescription'] = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new WorkboxError('invalid-value', details);\n    }\n};\nconst isArrayOfClass = (value, \n// Need general type to do check later.\nexpectedClass, // eslint-disable-line\ndetails) => {\n    const error = new WorkboxError('not-array-of-class', details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value) {\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports = process.env.NODE_ENV === 'production'\n    ? null\n    : {\n        hasMethod,\n        isArray,\n        isInstance,\n        isOneOf,\n        isType,\n        isArrayOfClass,\n    };\nexport { finalAssertExports as assert };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production'\n    ? null\n    : (() => {\n        // Don't overwrite this value if it's already set.\n        // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n        if (!('__WB_DISABLE_DEV_LOGS' in self)) {\n            self.__WB_DISABLE_DEV_LOGS = false;\n        }\n        let inGroup = false;\n        const methodToColorMap = {\n            debug: `#7f8c8d`,\n            log: `#2ecc71`,\n            warn: `#f39c12`,\n            error: `#c0392b`,\n            groupCollapsed: `#3498db`,\n            groupEnd: null, // No colored prefix on groupEnd\n        };\n        const print = function (method, args) {\n            if (self.__WB_DISABLE_DEV_LOGS) {\n                return;\n            }\n            if (method === 'groupCollapsed') {\n                // Safari doesn't print all console.groupCollapsed() arguments:\n                // https://bugs.webkit.org/show_bug.cgi?id=182754\n                if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                    console[method](...args);\n                    return;\n                }\n            }\n            const styles = [\n                `background: ${methodToColorMap[method]}`,\n                `border-radius: 0.5em`,\n                `color: white`,\n                `font-weight: bold`,\n                `padding: 2px 0.5em`,\n            ];\n            // When in a group, the workbox prefix is not displayed.\n            const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n            console[method](...logPrefix, ...args);\n            if (method === 'groupCollapsed') {\n                inGroup = true;\n            }\n            if (method === 'groupEnd') {\n                inGroup = false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        const api = {};\n        const loggerMethods = Object.keys(methodToColorMap);\n        for (const key of loggerMethods) {\n            const method = key;\n            api[method] = (...args) => {\n                print(method, args);\n            };\n        }\n        return api;\n    })());\nexport { logger };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:6.5.2'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * NavigationRoute makes it easy to create a\n * {@link workbox-routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * {@link https://fetch.spec.whatwg.org/#concept-request-mode|mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass NavigationRoute extends Route {\n    /**\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `allowlist` and `denylist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n     * portions of the requested URL.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object} options\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\n     * the route will not handle the request (even if a allowlist RegExp matches).\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the denylist doesn't match).\n     */\n    constructor(handler, { allowlist = [/./], denylist = [] } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArrayOfClass(allowlist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.allowlist',\n            });\n            assert.isArrayOfClass(denylist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.denylist',\n            });\n        }\n        super((options) => this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    /**\n     * Routes match handler.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request\n     * @return {boolean}\n     *\n     * @private\n     */\n    _match({ url, request }) {\n        if (request && request.mode !== 'navigate') {\n            return false;\n        }\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist) {\n            if (regExp.test(pathnameAndSearch)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                        `being used, since the URL matches this denylist pattern: ` +\n                        `${regExp.toString()}`);\n                }\n                return false;\n            }\n        }\n        if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`The navigation route ${pathnameAndSearch} ` + `is being used.`);\n            }\n            return true;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                `being used, since the URL being navigated to doesn't ` +\n                `match the allowlist.`);\n        }\n        return false;\n    }\n}\nexport { NavigationRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * If a Route throws an error while handling a request, this `handler`\n * will be called and given a chance to provide a response.\n *\n * @param {workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof workbox-routing\n */\nfunction setCatchHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setCatchHandler(handler);\n}\nexport { setCatchHandler };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Define a default `handler` that's called when no routes explicitly\n * match the incoming request.\n *\n * Without a default handler, unmatched requests will go against the\n * network as if there were no service worker present.\n *\n * @param {workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof workbox-routing\n */\nfunction setDefaultHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setDefaultHandler(handler);\n}\nexport { setDefaultHandler };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { NavigationRoute, } from './NavigationRoute.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { registerRoute } from './registerRoute.js';\nimport { Route } from './Route.js';\nimport { Router } from './Router.js';\nimport { setCatchHandler } from './setCatchHandler.js';\nimport { setDefaultHandler } from './setDefaultHandler.js';\nimport './_version.js';\n/**\n * @module workbox-routing\n */\nexport { NavigationRoute, RegExpRoute, registerRoute, Route, Router, setCatchHandler, setDefaultHandler, };\n","export * from './index.js';","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:6.5.2'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport '../_version.js';\n/**\n * @param {string} groupTitle\n * @param {Array<string>} deletedURLs\n *\n * @private\n */\nconst logGroup = (groupTitle, deletedURLs) => {\n    logger.groupCollapsed(groupTitle);\n    for (const url of deletedURLs) {\n        logger.log(url);\n    }\n    logger.groupEnd();\n};\n/**\n * @param {Array<string>} deletedURLs\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function printCleanupDetails(deletedURLs) {\n    const deletionCount = deletedURLs.length;\n    if (deletionCount > 0) {\n        logger.groupCollapsed(`During precaching cleanup, ` +\n            `${deletionCount} cached ` +\n            `request${deletionCount === 1 ? ' was' : 's were'} deleted.`);\n        logGroup('Deleted Cache Requests', deletedURLs);\n        logger.groupEnd();\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport '../_version.js';\n/**\n * @param {string} groupTitle\n * @param {Array<string>} urls\n *\n * @private\n */\nfunction _nestedGroup(groupTitle, urls) {\n    if (urls.length === 0) {\n        return;\n    }\n    logger.groupCollapsed(groupTitle);\n    for (const url of urls) {\n        logger.log(url);\n    }\n    logger.groupEnd();\n}\n/**\n * @param {Array<string>} urlsToPrecache\n * @param {Array<string>} urlsAlreadyPrecached\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function printInstallDetails(urlsToPrecache, urlsAlreadyPrecached) {\n    const precachedCount = urlsToPrecache.length;\n    const alreadyPrecachedCount = urlsAlreadyPrecached.length;\n    if (precachedCount || alreadyPrecachedCount) {\n        let message = `Precaching ${precachedCount} file${precachedCount === 1 ? '' : 's'}.`;\n        if (alreadyPrecachedCount > 0) {\n            message +=\n                ` ${alreadyPrecachedCount} ` +\n                    `file${alreadyPrecachedCount === 1 ? ' is' : 's are'} already cached.`;\n        }\n        logger.groupCollapsed(message);\n        _nestedGroup(`View newly precached URLs.`, urlsToPrecache);\n        _nestedGroup(`View previously precached URLs.`, urlsAlreadyPrecached);\n        logger.groupEnd();\n    }\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:6.5.2'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            response = await handler.fetch(new Request(request, {\n                integrity: integrityInRequest || integrityInManifest,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            if (integrityInManifest && noIntegrityConflict) {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds plugins to the precaching strategy.\n *\n * @param {Array<Object>} plugins\n *\n * @memberof workbox-precaching\n */\nfunction addPlugins(plugins) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.strategy.plugins.push(...plugins);\n}\nexport { addPlugins };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst SUBSTRING_TO_FIND = '-precache-';\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof workbox-precaching\n */\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName) => {\n        return (cacheName.includes(substringToFind) &&\n            cacheName.includes(self.registration.scope) &&\n            cacheName !== currentPrecacheName);\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName) => self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\nexport { deleteOutdatedCaches };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { deleteOutdatedCaches } from './utils/deleteOutdatedCaches.js';\nimport './_version.js';\n/**\n * Adds an `activate` event listener which will clean up incompatible\n * precaches that were created by older versions of Workbox.\n *\n * @memberof workbox-precaching\n */\nfunction cleanupOutdatedCaches() {\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('activate', ((event) => {\n        const cacheName = cacheNames.getPrecacheName();\n        event.waitUntil(deleteOutdatedCaches(cacheName).then((cachesDeleted) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (cachesDeleted.length > 0) {\n                    logger.log(`The following out-of-date precaches were cleaned up ` +\n                        `automatically:`, cachesDeleted);\n                }\n            }\n        }));\n    }));\n}\nexport { cleanupOutdatedCaches };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Helper function that calls\n * {@link PrecacheController#createHandlerBoundToURL} on the default\n * {@link PrecacheController} instance.\n *\n * If you are creating your own {@link PrecacheController}, then call the\n * {@link PrecacheController#createHandlerBoundToURL} on that instance,\n * instead of using this function.\n *\n * @param {string} url The precached URL which will be used to lookup the\n * `Response`.\n * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\n * response from the network if there's a precache miss.\n * @return {workbox-routing~handlerCallback}\n *\n * @memberof workbox-precaching\n */\nfunction createHandlerBoundToURL(url) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.createHandlerBoundToURL(url);\n}\nexport { createHandlerBoundToURL };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Takes in a URL, and returns the corresponding URL that could be used to\n * lookup the entry in the precache.\n *\n * If a relative URL is provided, the location of the service worker file will\n * be used as the base.\n *\n * For precached entries without revision information, the cache key will be the\n * same as the original URL.\n *\n * For precached entries with revision information, the cache key will be the\n * original URL with the addition of a query parameter used for keeping track of\n * the revision info.\n *\n * @param {string} url The URL whose cache key to look up.\n * @return {string} The cache key that corresponds to that URL.\n *\n * @memberof workbox-precaching\n */\nfunction getCacheKeyForURL(url) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.getCacheKeyForURL(url);\n}\nexport { getCacheKeyForURL };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Helper function that calls\n * {@link PrecacheController#matchPrecache} on the default\n * {@link PrecacheController} instance.\n *\n * If you are creating your own {@link PrecacheController}, then call\n * {@link PrecacheController#matchPrecache} on that instance,\n * instead of using this function.\n *\n * @param {string|Request} request The key (without revisioning parameters)\n * to look up in the precache.\n * @return {Promise<Response|undefined>}\n *\n * @memberof workbox-precaching\n */\nfunction matchPrecache(request) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.matchPrecache(request);\n}\nexport { matchPrecache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * `PrecacheFallbackPlugin` allows you to specify an \"offline fallback\"\n * response to be used when a given strategy is unable to generate a response.\n *\n * It does this by intercepting the `handlerDidError` plugin callback\n * and returning a precached response, taking the expected revision parameter\n * into account automatically.\n *\n * Unless you explicitly pass in a `PrecacheController` instance to the\n * constructor, the default instance will be used. Generally speaking, most\n * developers will end up using the default.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheFallbackPlugin {\n    /**\n     * Constructs a new PrecacheFallbackPlugin with the associated fallbackURL.\n     *\n     * @param {Object} config\n     * @param {string} config.fallbackURL A precached URL to use as the fallback\n     *     if the associated strategy can't generate a response.\n     * @param {PrecacheController} [config.precacheController] An optional\n     *     PrecacheController instance. If not provided, the default\n     *     PrecacheController will be used.\n     */\n    constructor({ fallbackURL, precacheController, }) {\n        /**\n         * @return {Promise<Response>} The precache response for the fallback URL.\n         *\n         * @private\n         */\n        this.handlerDidError = () => this._precacheController.matchPrecache(this._fallbackURL);\n        this._fallbackURL = fallbackURL;\n        this._precacheController =\n            precacheController || getOrCreatePrecacheController();\n    }\n}\nexport { PrecacheFallbackPlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n// * * * IMPORTANT! * * *\n// ------------------------------------------------------------------------- //\n// jdsoc type definitions cannot be declared above TypeScript definitions or\n// they'll be stripped from the built `.js` files, and they'll only be in the\n// `d.ts` files, which aren't read by the jsdoc generator. As a result we\n// have to put declare them below.\n/**\n * @typedef {Object} InstallResult\n * @property {Array<string>} updatedURLs List of URLs that were updated during\n * installation.\n * @property {Array<string>} notUpdatedURLs List of URLs that were already up to\n * date.\n *\n * @memberof workbox-precaching\n */\n/**\n * @typedef {Object} CleanupResult\n * @property {Array<string>} deletedCacheRequests List of URLs that were deleted\n * while cleaning up the cache.\n *\n * @memberof workbox-precaching\n */\n/**\n * @typedef {Object} PrecacheEntry\n * @property {string} url URL to precache.\n * @property {string} [revision] Revision information for the URL.\n * @property {string} [integrity] Integrity metadata that will be used when\n * making the network request for the URL.\n *\n * @memberof workbox-precaching\n */\n/**\n * The \"urlManipulation\" callback can be used to determine if there are any\n * additional permutations of a URL that should be used to check against\n * the available precached files.\n *\n * For example, Workbox supports checking for '/index.html' when the URL\n * '/' is provided. This callback allows additional, custom checks.\n *\n * @callback ~urlManipulation\n * @param {Object} context\n * @param {URL} context.url The request's URL.\n * @return {Array<URL>} To add additional urls to test, return an Array of\n * URLs. Please note that these **should not be strings**, but URL objects.\n *\n * @memberof workbox-precaching\n */\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addPlugins } from './addPlugins.js';\nimport { addRoute } from './addRoute.js';\nimport { cleanupOutdatedCaches } from './cleanupOutdatedCaches.js';\nimport { createHandlerBoundToURL } from './createHandlerBoundToURL.js';\nimport { getCacheKeyForURL } from './getCacheKeyForURL.js';\nimport { matchPrecache } from './matchPrecache.js';\nimport { precache } from './precache.js';\nimport { precacheAndRoute } from './precacheAndRoute.js';\nimport { PrecacheController } from './PrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport { PrecacheFallbackPlugin } from './PrecacheFallbackPlugin.js';\nimport './_version.js';\n/**\n * Most consumers of this module will want to use the\n * {@link workbox-precaching.precacheAndRoute}\n * method to add assets to the cache and respond to network requests with these\n * cached assets.\n *\n * If you require more control over caching and routing, you can use the\n * {@link workbox-precaching.PrecacheController}\n * interface.\n *\n * @module workbox-precaching\n */\nexport { addPlugins, addRoute, cleanupOutdatedCaches, createHandlerBoundToURL, getCacheKeyForURL, matchPrecache, precache, precacheAndRoute, PrecacheController, PrecacheRoute, PrecacheStrategy, PrecacheFallbackPlugin, };\nexport * from './_types.js';\n","export * from './index.js';","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport '../_version.js';\nexport const messages = {\n    strategyStart: (strategyName, request) => `Using ${strategyName} to respond to '${getFriendlyURL(request.url)}'`,\n    printFinalResponse: (response) => {\n        if (response) {\n            logger.groupCollapsed(`View the final response here.`);\n            logger.log(response || '[No response returned]');\n            logger.groupEnd();\n        }\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network)\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass CacheFirst extends Strategy {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await handler.fetchAndCachePut(request);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\n *\n * If there is no cache match, this will throw a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass CacheOnly extends Strategy {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        const response = await handler.cacheMatch(request);\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(`Found a cached response in the '${this.cacheName}' ` + `cache.`);\n                messages.printFinalResponse(response);\n            }\n            else {\n                logger.log(`No response found in the '${this.cacheName}' cache.`);\n            }\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n}\nexport { CacheOnly };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkFirst extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, logs, handler });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({\n            timeoutId,\n            request,\n            logs,\n            handler,\n        });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async () => {\n            // Promise.race() will resolve as soon as the first promise resolves.\n            return ((await handler.waitUntil(Promise.race(promises))) ||\n                // If Promise.race() resolved with null, it might be due to a network\n                // timeout + a cache miss. If that were to happen, we'd rather wait until\n                // the networkPromise resolves instead of returning null.\n                // Note that it's fine to await an already-resolved promise, so we don't\n                // have to check to see if it's still \"in flight\".\n                (await networkPromise));\n        })());\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, handler, }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, handler, }) {\n        let error;\n        let response;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        }\n        catch (fetchError) {\n            if (fetchError instanceof Error) {\n                error = fetchError;\n            }\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}'` + ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { NetworkFirst };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkOnly extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will result in a network error.\n     */\n    constructor(options = {}) {\n        super(options);\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: '_handle',\n                paramName: 'request',\n            });\n        }\n        let error = undefined;\n        let response;\n        try {\n            const promises = [\n                handler.fetch(request),\n            ];\n            if (this._networkTimeoutSeconds) {\n                const timeoutPromise = timeout(this._networkTimeoutSeconds * 1000);\n                promises.push(timeoutPromise);\n            }\n            response = await Promise.race(promises);\n            if (!response) {\n                throw new Error(`Timed out the network response after ` +\n                    `${this._networkTimeoutSeconds} seconds.`);\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(`Got response from network.`);\n            }\n            else {\n                logger.log(`Unable to get a response from the network.`);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { NetworkOnly };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate](https://developer.chrome.com/docs/workbox/reference/workbox-strategies/#type-StaleWhileRevalidate)\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass StaleWhileRevalidate extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = handler.fetchAndCachePut(request).catch(() => {\n            // Swallow this error because a 'no-response' error will be thrown in\n            // main handler return flow. This will be in the `waitUntil()` flow.\n        });\n        void handler.waitUntil(fetchAndCachePromise);\n        let response = await handler.cacheMatch(request);\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\n                // https://github.com/microsoft/TypeScript/issues/20006\n                response = (await fetchAndCachePromise);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { CacheFirst } from './CacheFirst.js';\nimport { CacheOnly } from './CacheOnly.js';\nimport { NetworkFirst } from './NetworkFirst.js';\nimport { NetworkOnly } from './NetworkOnly.js';\nimport { StaleWhileRevalidate } from './StaleWhileRevalidate.js';\nimport { Strategy } from './Strategy.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * There are common caching strategies that most service workers will need\n * and use. This module provides simple implementations of these strategies.\n *\n * @module workbox-strategies\n */\nexport { CacheFirst, CacheOnly, NetworkFirst, NetworkOnly, StaleWhileRevalidate, Strategy, StrategyHandler, };\n","export * from './index.js';","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:cacheable-response:6.5.2'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport './_version.js';\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n *\n * @memberof workbox-cacheable-response\n */\nclass CacheableResponse {\n    /**\n     * To construct a new CacheableResponse instance you must provide at least\n     * one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.statuses || config.headers)) {\n                throw new WorkboxError('statuses-or-headers-required', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.statuses) {\n                assert.isArray(config.statuses, {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.statuses',\n                });\n            }\n            if (config.headers) {\n                assert.isType(config.headers, 'object', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.headers',\n                });\n            }\n        }\n        this._statuses = config.statuses;\n        this._headers = config.headers;\n    }\n    /**\n     * Checks a response to see whether it's cacheable or not, based on this\n     * object's configuration.\n     *\n     * @param {Response} response The response whose cacheability is being\n     * checked.\n     * @return {boolean} `true` if the `Response` is cacheable, and `false`\n     * otherwise.\n     */\n    isResponseCacheable(response) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(response, Response, {\n                moduleName: 'workbox-cacheable-response',\n                className: 'CacheableResponse',\n                funcName: 'isResponseCacheable',\n                paramName: 'response',\n            });\n        }\n        let cacheable = true;\n        if (this._statuses) {\n            cacheable = this._statuses.includes(response.status);\n        }\n        if (this._headers && cacheable) {\n            cacheable = Object.keys(this._headers).some((headerName) => {\n                return response.headers.get(headerName) === this._headers[headerName];\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (!cacheable) {\n                logger.groupCollapsed(`The request for ` +\n                    `'${getFriendlyURL(response.url)}' returned a response that does ` +\n                    `not meet the criteria for being cached.`);\n                logger.groupCollapsed(`View cacheability criteria here.`);\n                logger.log(`Cacheable statuses: ` + JSON.stringify(this._statuses));\n                logger.log(`Cacheable headers: ` + JSON.stringify(this._headers, null, 2));\n                logger.groupEnd();\n                const logFriendlyHeaders = {};\n                response.headers.forEach((value, key) => {\n                    logFriendlyHeaders[key] = value;\n                });\n                logger.groupCollapsed(`View response status and headers here.`);\n                logger.log(`Response status: ${response.status}`);\n                logger.log(`Response headers: ` + JSON.stringify(logFriendlyHeaders, null, 2));\n                logger.groupEnd();\n                logger.groupCollapsed(`View full response details here.`);\n                logger.log(response.headers);\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n            }\n        }\n        return cacheable;\n    }\n}\nexport { CacheableResponse };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { CacheableResponse, } from './CacheableResponse.js';\nimport './_version.js';\n/**\n * A class implementing the `cacheWillUpdate` lifecycle callback. This makes it\n * easier to add in cacheability checks to requests made via Workbox's built-in\n * strategies.\n *\n * @memberof workbox-cacheable-response\n */\nclass CacheableResponsePlugin {\n    /**\n     * To construct a new CacheableResponsePlugin instance you must provide at\n     * least one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config) {\n        /**\n         * @param {Object} options\n         * @param {Response} options.response\n         * @return {Response|null}\n         * @private\n         */\n        this.cacheWillUpdate = async ({ response }) => {\n            if (this._cacheableResponse.isResponseCacheable(response)) {\n                return response;\n            }\n            return null;\n        };\n        this._cacheableResponse = new CacheableResponse(config);\n    }\n}\nexport { CacheableResponsePlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { CacheableResponse, } from './CacheableResponse.js';\nimport { CacheableResponsePlugin } from './CacheableResponsePlugin.js';\nimport './_version.js';\n/**\n * @module workbox-cacheable-response\n */\nexport { CacheableResponse, CacheableResponsePlugin };\n","export * from './index.js';","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A helper function that prevents a promise from being flagged as unused.\n *\n * @private\n **/\nexport function dontWaitFor(promise) {\n    // Effective no-op.\n    void promise.then(() => { });\n}\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:expiration:6.5.2'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB, deleteDB } from 'idb';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst CACHE_OBJECT_STORE = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._db = null;\n        this._cacheName = cacheName;\n    }\n    /**\n     * Performs an upgrade of indexedDB.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDb(db) {\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(CACHE_OBJECT_STORE, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n    }\n    /**\n     * Performs an upgrade of indexedDB and deletes deprecated DBs.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDbAndDeleteOldDbs(db) {\n        this._upgradeDb(db);\n        if (this._cacheName) {\n            void deleteDB(this._cacheName);\n        }\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        const db = await this.getDb();\n        const tx = db.transaction(CACHE_OBJECT_STORE, 'readwrite', {\n            durability: 'relaxed',\n        });\n        await tx.store.put(entry);\n        await tx.done;\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number | undefined}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const db = await this.getDb();\n        const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n        return entry === null || entry === void 0 ? void 0 : entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const db = await this.getDb();\n        let cursor = await db\n            .transaction(CACHE_OBJECT_STORE)\n            .store.index('timestamp')\n            .openCursor(null, 'prev');\n        const entriesToDelete = [];\n        let entriesNotDeletedCount = 0;\n        while (cursor) {\n            const result = cursor.value;\n            // TODO(philipwalton): once we can use a multi-key index, we\n            // won't have to check `cacheName` here.\n            if (result.cacheName === this._cacheName) {\n                // Delete an entry if it's older than the max age or\n                // if we already have the max number allowed.\n                if ((minTimestamp && result.timestamp < minTimestamp) ||\n                    (maxCount && entriesNotDeletedCount >= maxCount)) {\n                    // TODO(philipwalton): we should be able to delete the\n                    // entry right here, but doing so causes an iteration\n                    // bug in Safari stable (fixed in TP). Instead we can\n                    // store the keys of the entries to delete, and then\n                    // delete the separate transactions.\n                    // https://github.com/GoogleChrome/workbox/issues/1978\n                    // cursor.delete();\n                    // We only need to return the URL, not the whole entry.\n                    entriesToDelete.push(cursor.value);\n                }\n                else {\n                    entriesNotDeletedCount++;\n                }\n            }\n            cursor = await cursor.continue();\n        }\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await db.delete(CACHE_OBJECT_STORE, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */\n    async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, 1, {\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this),\n            });\n        }\n        return this._db;\n    }\n}\nexport { CacheTimestampsModel };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheTimestampsModel } from './models/CacheTimestampsModel.js';\nimport './_version.js';\n/**\n * The `CacheExpiration` class allows you define an expiration and / or\n * limit on the number of responses stored in a\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\n *\n * @memberof workbox-expiration\n */\nclass CacheExpiration {\n    /**\n     * To construct a new CacheExpiration instance you must provide at least\n     * one of the `config` properties.\n     *\n     * @param {string} cacheName Name of the cache to apply restrictions to.\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     */\n    constructor(cacheName, config = {}) {\n        this._isRunning = false;\n        this._rerunRequested = false;\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(cacheName, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'constructor',\n                paramName: 'cacheName',\n            });\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._maxEntries = config.maxEntries;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._matchOptions = config.matchOptions;\n        this._cacheName = cacheName;\n        this._timestampModel = new CacheTimestampsModel(cacheName);\n    }\n    /**\n     * Expires entries for the given cache and given criteria.\n     */\n    async expireEntries() {\n        if (this._isRunning) {\n            this._rerunRequested = true;\n            return;\n        }\n        this._isRunning = true;\n        const minTimestamp = this._maxAgeSeconds\n            ? Date.now() - this._maxAgeSeconds * 1000\n            : 0;\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n        // Delete URLs from the cache\n        const cache = await self.caches.open(this._cacheName);\n        for (const url of urlsExpired) {\n            await cache.delete(url, this._matchOptions);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (urlsExpired.length > 0) {\n                logger.groupCollapsed(`Expired ${urlsExpired.length} ` +\n                    `${urlsExpired.length === 1 ? 'entry' : 'entries'} and removed ` +\n                    `${urlsExpired.length === 1 ? 'it' : 'them'} from the ` +\n                    `'${this._cacheName}' cache.`);\n                logger.log(`Expired the following ${urlsExpired.length === 1 ? 'URL' : 'URLs'}:`);\n                urlsExpired.forEach((url) => logger.log(`    ${url}`));\n                logger.groupEnd();\n            }\n            else {\n                logger.debug(`Cache expiration ran and found no entries to remove.`);\n            }\n        }\n        this._isRunning = false;\n        if (this._rerunRequested) {\n            this._rerunRequested = false;\n            dontWaitFor(this.expireEntries());\n        }\n    }\n    /**\n     * Update the timestamp for the given URL. This ensures the when\n     * removing entries based on maximum entries, most recently used\n     * is accurate or when expiring, the timestamp is up-to-date.\n     *\n     * @param {string} url\n     */\n    async updateTimestamp(url) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(url, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'updateTimestamp',\n                paramName: 'url',\n            });\n        }\n        await this._timestampModel.setTimestamp(url, Date.now());\n    }\n    /**\n     * Can be used to check if a URL has expired or not before it's used.\n     *\n     * This requires a look up from IndexedDB, so can be slow.\n     *\n     * Note: This method will not remove the cached entry, call\n     * `expireEntries()` to remove indexedDB and Cache entries.\n     *\n     * @param {string} url\n     * @return {boolean}\n     */\n    async isURLExpired(url) {\n        if (!this._maxAgeSeconds) {\n            if (process.env.NODE_ENV !== 'production') {\n                throw new WorkboxError(`expired-test-without-max-age`, {\n                    methodName: 'isURLExpired',\n                    paramName: 'maxAgeSeconds',\n                });\n            }\n            return false;\n        }\n        else {\n            const timestamp = await this._timestampModel.getTimestamp(url);\n            const expireOlderThan = Date.now() - this._maxAgeSeconds * 1000;\n            return timestamp !== undefined ? timestamp < expireOlderThan : true;\n        }\n    }\n    /**\n     * Removes the IndexedDB object store used to keep track of cache expiration\n     * metadata.\n     */\n    async delete() {\n        // Make sure we don't attempt another rerun if we're called in the middle of\n        // a cache expiration.\n        this._rerunRequested = false;\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\n    }\n}\nexport { CacheExpiration };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from './_private/logger.js';\nimport { assert } from './_private/assert.js';\nimport { quotaErrorCallbacks } from './models/quotaErrorCallbacks.js';\nimport './_version.js';\n/**\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\n * there's a quota error.\n *\n * @param {Function} callback\n * @memberof workbox-core\n */\n// Can't change Function type\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction registerQuotaErrorCallback(callback) {\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isType(callback, 'function', {\n            moduleName: 'workbox-core',\n            funcName: 'register',\n            paramName: 'callback',\n        });\n    }\n    quotaErrorCallbacks.add(callback);\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Registered a callback to respond to quota errors.', callback);\n    }\n}\nexport { registerQuotaErrorCallback };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheExpiration } from './CacheExpiration.js';\nimport './_version.js';\n/**\n * This plugin can be used in a `workbox-strategy` to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * It can only be used with `workbox-strategy` instances that have a\n * [custom `cacheName` property set](/web/tools/workbox/guides/configure-workbox#custom_cache_names_in_strategies).\n * In other words, it can't be used to expire entries in strategy that uses the\n * default runtime cache name.\n *\n * Whenever a cached response is used or updated, this plugin will look\n * at the associated cache and remove any old or extra responses.\n *\n * When using `maxAgeSeconds`, responses may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached response has been used. If the response has a \"Date\" header, then\n * a light weight expiration check is performed and the response will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n *\n * @memberof workbox-expiration\n */\nclass ExpirationPlugin {\n    /**\n     * @param {ExpirationPluginOptions} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\n     * automatic deletion if the available storage quota has been exceeded.\n     */\n    constructor(config = {}) {\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when a `Response` is about to be returned\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n         * the handler. It allows the `Response` to be inspected for freshness and\n         * prevents it from being used if the `Response`'s `Date` header value is\n         * older than the configured `maxAgeSeconds`.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache the response is in.\n         * @param {Response} options.cachedResponse The `Response` object that's been\n         *     read from a cache and whose freshness should be checked.\n         * @return {Response} Either the `cachedResponse`, if it's\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n         *\n         * @private\n         */\n        this.cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse, }) => {\n            if (!cachedResponse) {\n                return null;\n            }\n            const isFresh = this._isResponseDateFresh(cachedResponse);\n            // Expire entries to ensure that even if the expiration date has\n            // expired, it'll only be used once.\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            dontWaitFor(cacheExpiration.expireEntries());\n            // Update the metadata for the request URL to the current timestamp,\n            // but don't `await` it as we don't want to block the response.\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n            if (event) {\n                try {\n                    event.waitUntil(updateTimestampDone);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // The event may not be a fetch event; only log the URL if it is.\n                        if ('request' in event) {\n                            logger.warn(`Unable to ensure service worker stays alive when ` +\n                                `updating cache entry for ` +\n                                `'${getFriendlyURL(event.request.url)}'.`);\n                        }\n                    }\n                }\n            }\n            return isFresh ? cachedResponse : null;\n        };\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when an entry is added to a cache.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache that was updated.\n         * @param {string} options.request The Request for the cached entry.\n         *\n         * @private\n         */\n        this.cacheDidUpdate = async ({ cacheName, request, }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                assert.isType(cacheName, 'string', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'cacheName',\n                });\n                assert.isInstance(request, Request, {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'request',\n                });\n            }\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            await cacheExpiration.updateTimestamp(request.url);\n            await cacheExpiration.expireEntries();\n        };\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._config = config;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheExpirations = new Map();\n        if (config.purgeOnQuotaError) {\n            registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\n        }\n    }\n    /**\n     * A simple helper method to return a CacheExpiration instance for a given\n     * cache name.\n     *\n     * @param {string} cacheName\n     * @return {CacheExpiration}\n     *\n     * @private\n     */\n    _getCacheExpiration(cacheName) {\n        if (cacheName === cacheNames.getRuntimeName()) {\n            throw new WorkboxError('expire-custom-caches-only');\n        }\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    /**\n     * @param {Response} cachedResponse\n     * @return {boolean}\n     *\n     * @private\n     */\n    _isResponseDateFresh(cachedResponse) {\n        if (!this._maxAgeSeconds) {\n            // We aren't expiring by age, so return true, it's fresh\n            return true;\n        }\n        // Check if the 'date' header will suffice a quick expiration check.\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n        // discussion.\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) {\n            // Unable to parse date, so assume it's fresh.\n            return true;\n        }\n        // If we have a valid headerTime, then our response is fresh iff the\n        // headerTime plus maxAgeSeconds is greater than the current time.\n        const now = Date.now();\n        return dateHeaderTimestamp >= now - this._maxAgeSeconds * 1000;\n    }\n    /**\n     * This method will extract the data header and parse it into a useful\n     * value.\n     *\n     * @param {Response} cachedResponse\n     * @return {number|null}\n     *\n     * @private\n     */\n    _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has('date')) {\n            return null;\n        }\n        const dateHeader = cachedResponse.headers.get('date');\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        // If the Date header was invalid for some reason, parsedDate.getTime()\n        // will return NaN.\n        if (isNaN(headerTime)) {\n            return null;\n        }\n        return headerTime;\n    }\n    /**\n     * This is a helper method that performs two operations:\n     *\n     * - Deletes *all* the underlying Cache instances associated with this plugin\n     * instance, by calling caches.delete() on your behalf.\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\n     * details for each Cache instance.\n     *\n     * When using cache expiration, calling this method is preferable to calling\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\n     *\n     * Note that if you're *not* using cache expiration for a given cache, calling\n     * `caches.delete()` and passing in the cache's name should be sufficient.\n     * There is no Workbox-specific method needed for cleanup in that case.\n     */\n    async deleteCacheAndMetadata() {\n        // Do this one at a time instead of all at once via `Promise.all()` to\n        // reduce the chance of inconsistency if a promise rejects.\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        // Reset this._cacheExpirations to its initial state.\n        this._cacheExpirations = new Map();\n    }\n}\nexport { ExpirationPlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { CacheExpiration } from './CacheExpiration.js';\nimport { ExpirationPlugin } from './ExpirationPlugin.js';\nimport './_version.js';\n/**\n * @module workbox-expiration\n */\nexport { CacheExpiration, ExpirationPlugin };\n","export * from './index.js';","import { registerRoute as _registerRoute } from 'workbox-routing';\nimport { precacheAndRoute as _precacheAndRoute } from 'workbox-precaching';\nimport {\n  NetworkFirst,\n  StaleWhileRevalidate,\n  CacheFirst,\n} from 'workbox-strategies';\n\n// Used for filtering matches based on status code, header, or both\nimport { CacheableResponsePlugin } from 'workbox-cacheable-response';\n// Used to limit entries in cache, remove entries after a certain period of time\nimport { ExpirationPlugin } from 'workbox-expiration';\n\nconst noop = () => {};\n\nconst IS_DEV = process.env.NODE_ENV === 'development';\n\nconst registerRoute = IS_DEV ? noop : _registerRoute;\nconst precacheAndRoute = IS_DEV ? noop : _precacheAndRoute;\n\n// Cache page navigations (html) with a Network First strategy\nregisterRoute(\n  // Check to see if the request is a navigation to a new page\n  ({ request }) => request.mode === 'navigate',\n  // Use a Network First caching strategy\n  new NetworkFirst({\n    // Put all cached files in a cache named 'pages'\n    cacheName: 'pages',\n    plugins: [\n      // Ensure that only requests that result in a 200 status are cached\n      new CacheableResponsePlugin({\n        statuses: [200],\n      }),\n    ],\n  }),\n);\n\n// Cache CSS, JS, and Web Worker requests with a Stale While Revalidate strategy\nregisterRoute(\n  // Check to see if the request's destination is style for stylesheets, script for JavaScript, or worker for web worker\n  ({ request }) =>\n    request.destination === 'style' ||\n    request.destination === 'script' ||\n    request.destination === 'worker',\n  // Use a Stale While Revalidate caching strategy\n  new StaleWhileRevalidate({\n    // Put all cached files in a cache named 'assets'\n    cacheName: 'assets',\n    plugins: [\n      // Ensure that only requests that result in a 200 status are cached\n      new CacheableResponsePlugin({\n        statuses: [200],\n      }),\n    ],\n  }),\n);\n\n// Cache images with a Cache First strategy\nregisterRoute(\n  // Check to see if the request's destination is style for an image\n  ({ request }) => request.destination === 'image',\n  // Use a Cache First caching strategy\n  new CacheFirst({\n    // Put all cached files in a cache named 'images'\n    cacheName: 'images',\n    plugins: [\n      // Ensure that only requests that result in a 200 status are cached\n      new CacheableResponsePlugin({\n        statuses: [200],\n      }),\n      // Don't cache more than 50 items, and expire them after 30 days\n      new ExpirationPlugin({\n        maxEntries: 50,\n        maxAgeSeconds: 60 * 60 * 24 * 30, // 30 Days\n      }),\n    ],\n  }),\n);\n\n// Use with precache injection\n// Make sure runs after above routes\nprecacheAndRoute(self.__precacheManifest);\n"]}